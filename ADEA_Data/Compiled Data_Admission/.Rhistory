(1/4)*(1-(1-.372)^4)
roof(1.2)
ceiling(1.32)
Max_T = 2
Initial_T = 1
Result = data.frame(matrix(NA, nrow = ceiling((Max_T - Initial_T)/Step_Size_H), ncol = 2))
Step_Size_H = .5
Result = data.frame(matrix(NA, nrow = ceiling((Max_T - Initial_T)/Step_Size_H), ncol = 2))
Result
colnames(Result) = ["T", "Euler_Est_Value"]
colnames(Result) = c("T", "Euler_Est_Value")
Result$T
Result
Result = data.frame(matrix(NA, nrow = ceiling((Max_T - Initial_T)/Step_Size_H) + 1, ncol = 2))
colnames(Result) = c("T", "Euler_Est_Value")
Result = data.frame(matrix(NA, nrow = ceiling((Max_T - Initial_T)/Step_Size_H) + 1, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
View(Result)
View(Result)
knitr::opts_chunk$set(echo = TRUE)
Q522A_Der = function(y,t){
return(exp(t-y))
}
EulerEstimator = function(Derivative, Initial_T, Initial_Y, Max_T, Step_Size_H){
Result = data.frame(matrix(NA, nrow = ceiling((Max_T - Initial_T)/Step_Size_H) + 1, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Result$Derivative_at_Point[1] = Derivative(Initial_Y, Initial_T)
for(i in 2:ceiling((Max_T - Initial_T)/Step_Size_H) + 1){
Result$T[i] = Initial_T + i * Step_Size_H
Result$Euler_Est_Value[i] = Result$Euler_Est_Value[i-1] + Step_Size_H * Result$Derivative_at_Point[i-1]
Result$Derivative_at_Point[i] = Derivative(Result$Euler_Est_Value[i], Result$T[i])
}
return(Result)
}
GG = EulerEstimator(Q522A_Der, 0, 1, 1, .5)
GG
Derivative = Q552A_Der
Q522A_Der = function(y,t){
return(exp(t-y))
}
Derivative = Q552A_Der
Result$T[2]
Result$T[3]
Q522A_Der = function(y,t){
return(exp(t-y))
}
EulerEstimator = function(Derivative, Initial_T, Initial_Y, Max_T, Step_Size_H){
Result = data.frame(matrix(NA, nrow = ceiling((Max_T - Initial_T)/Step_Size_H) + 1, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Result$Derivative_at_Point[1] = Derivative(Initial_Y, Initial_T)
for(i in 2:ceiling((Max_T - Initial_T)/Step_Size_H) + 1){
Result$T[i] = Initial_T + i * Step_Size_H
Result$Euler_Est_Value[i] = Result$Euler_Est_Value[i-1] + Step_Size_H * Result$Derivative_at_Point[i-1]
Result$Derivative_at_Point[i] = Derivative(Result$Euler_Est_Value[i], Result$T[i])
}
return(Result)
}
GG = EulerEstimator(Q522A_Der, 0, 1, 1, .5)
GG
Result = data.frame(matrix(NA, nrow = ceiling((Max_T - Initial_T)/Step_Size_H) + 1, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Initial_Y = 1
Result = data.frame(matrix(NA, nrow = ceiling((Max_T - Initial_T)/Step_Size_H) + 1, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Result$Derivative_at_Point[1] = Q522A_Der(Initial_Y, Initial_T)
Result
i = 2
Result$T[i] = Initial_T + i * Step_Size_H
Result
Result$Euler_Est_Value[i] = Result$Euler_Est_Value[i-1] + Step_Size_H * Result$Derivative_at_Point[i-1]
Result
Result$Derivative_at_Point[i] = Q522A_Der(Result$Euler_Est_Value[i], Result$T[i])
Result
Q522A_Der = function(y,t){
return(exp(t-y))
}
EulerEstimator = function(Derivative, Initial_T, Initial_Y, Max_T, Step_Size_H){
Row_Length = ceiling((Max_T - Initial_T)/Step_Size_H) + 1
Result = data.frame(matrix(NA, nrow = Row_Length, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Result$Derivative_at_Point[1] = Derivative(Initial_Y, Initial_T)
for(i in 2:Row_Length){
print(i)
Result$T[i] = Initial_T + i * Step_Size_H
Result$Euler_Est_Value[i] = Result$Euler_Est_Value[i-1] + Step_Size_H * Result$Derivative_at_Point[i-1]
Result$Derivative_at_Point[i] = Derivative(Result$Euler_Est_Value[i], Result$T[i])
}
return(Result)
}
GG = EulerEstimator(Q522A_Der, 0, 1, 1, .5)
Q522A_Der = function(y,t){
return(exp(t-y))
}
EulerEstimator = function(Derivative, Initial_T, Initial_Y, Max_T, Step_Size_H){
Row_Length = ceiling((Max_T - Initial_T)/Step_Size_H) + 1
Result = data.frame(matrix(NA, nrow = Row_Length, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Result$Derivative_at_Point[1] = Derivative(Initial_Y, Initial_T)
for(i in 2:Row_Length){
print(i)
Result$T[i] = Initial_T + (i-1) * Step_Size_H
Result$Euler_Est_Value[i] = Result$Euler_Est_Value[i-1] + Step_Size_H * Result$Derivative_at_Point[i-1]
Result$Derivative_at_Point[i] = Derivative(Result$Euler_Est_Value[i], Result$T[i])
}
return(Result)
}
GG = EulerEstimator(Q522A_Der, 0, 1, 1, .5)
GG
Q522A_Der = function(y,t){
return(exp(t-y))
}
EulerEstimator = function(Derivative, Initial_T, Initial_Y, Max_T, Step_Size_H){
Row_Length = ceiling((Max_T - Initial_T)/Step_Size_H) + 1
Result = data.frame(matrix(NA, nrow = Row_Length, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Result$Derivative_at_Point[1] = Derivative(Initial_Y, Initial_T)
for(i in 2:Row_Length){
print(i)
Result$T[i] = Initial_T + (i-1) * Step_Size_H
Result$Euler_Est_Value[i] = Result$Euler_Est_Value[i-1] + Step_Size_H * Result$Derivative_at_Point[i-1]
Result$Derivative_at_Point[i] = Derivative(Result$Euler_Est_Value[i], Result$T[i])
}
return(Result)
}
Q522A_Res = EulerEstimator(Q522A_Der, 0, 1, 1, .5)
for(i in 1:3){
print("We estimate y(", Q522A_Res$T[i], ") = ", Q522A_Res$Euler_Est_Value[i])
}
Q522A_Der = function(y,t){
return(exp(t-y))
}
EulerEstimator = function(Derivative, Initial_T, Initial_Y, Max_T, Step_Size_H){
Row_Length = ceiling((Max_T - Initial_T)/Step_Size_H) + 1
Result = data.frame(matrix(NA, nrow = Row_Length, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Result$Derivative_at_Point[1] = Derivative(Initial_Y, Initial_T)
for(i in 2:Row_Length){
print(i)
Result$T[i] = Initial_T + (i-1) * Step_Size_H
Result$Euler_Est_Value[i] = Result$Euler_Est_Value[i-1] + Step_Size_H * Result$Derivative_at_Point[i-1]
Result$Derivative_at_Point[i] = Derivative(Result$Euler_Est_Value[i], Result$T[i])
}
return(Result)
}
Q522A_Res = EulerEstimator(Q522A_Der, 0, 1, 1, .5)
for(i in 1:3){
print(paste("We estimate y(", Q522A_Res$T[i], ") = ", Q522A_Res$Euler_Est_Value[i]))
}
Q522A_Der = function(y,t){
return(exp(t-y))
}
EulerEstimator = function(Derivative, Initial_T, Initial_Y, Max_T, Step_Size_H){
Row_Length = ceiling((Max_T - Initial_T)/Step_Size_H) + 1
Result = data.frame(matrix(NA, nrow = Row_Length, ncol = 3))
colnames(Result) = c("T", "Derivative_at_Point", "Euler_Est_Value")
Result$T[1] = Initial_T
Result$Euler_Est_Value[1] = Initial_Y
Result$Derivative_at_Point[1] = Derivative(Initial_Y, Initial_T)
for(i in 2:Row_Length){
print(i)
Result$T[i] = Initial_T + (i-1) * Step_Size_H
Result$Euler_Est_Value[i] = Result$Euler_Est_Value[i-1] + Step_Size_H * Result$Derivative_at_Point[i-1]
Result$Derivative_at_Point[i] = Derivative(Result$Euler_Est_Value[i], Result$T[i])
}
return(Result)
}
Q522A_Res = EulerEstimator(Q522A_Der, 0, 1, 1, .5)
for(i in 1:3){
print(paste("We estimate y(", Q522A_Res$T[i], ") = ", Q522A_Res$Euler_Est_Value[i]))
}
Q522B_Der = function(y,t){
return((1+t)/(1+y))
}
Q522B_Res = EulerEstimator(Q522B_Der, 1, 2, 2, .5)
for(i in 1:3){
print(paste("We estimate y(", Q522A_Res$T[i], ") = ", Q522A_Res$Euler_Est_Value[i]))
}
Q522B_Der = function(y,t){
return((1+t)/(1+y))
}
Q522B_Res = EulerEstimator(Q522B_Der, 1, 2, 2, .5)
for(i in 1:3){
print(paste("We estimate y(", Q522B_Res$T[i], ") = ", Q522A_Res$Euler_Est_Value[i]))
}
Q522B_Der = function(y,t){
return((1+t)/(1+y))
}
Q522B_Res = EulerEstimator(Q522B_Der, 1, 2, 2, .5)
for(i in 1:3){
print(paste("We estimate y(", Q522B_Res$T[i], ") = ", Q522A_Res$Euler_Est_Value[i]))
}
Q522B_Der = function(y,t){
return((1+t)/(1+y))
}
Q522B_Res = EulerEstimator(Q522B_Der, 1, 2, 2, .5)
for(i in 1:3){
print(paste("We estimate y(", Q522B_Res$T[i], ") = ", Q522B_Res$Euler_Est_Value[i]))
}
ln(2)
;log(2)
log(2)
Q522A_Res$True_Y = log(exp(Q522A_Res$T) + exp(1) - 1)
View(GG)
View(Q522A_Res)
n = 2
epsilon = 0.0000001
A = matrix(sample.int(20, n^2, replace = TRUE), nrow = 2)
A
norm(A, type = "2")^2
alpha = runif(1, 0, 2/norm(A, type = "2")^2)
A
solve(A)
old_X = alpha * t(A)
updated_X = old_X %*% (2 * diag(n) - A %*% old_X)
while(norm(old_X-updated_X, type = "2") > epsilon){
old_X = updated_X
updated_X = old_X %*% (2 * diag(n) - A %*% old_X)
}
updated_X
runif(1, min = 0, max = 114514)
length(A)
ncol(A)
Inverse_Iter_Finder = function(A, epsilon){
# Begin by generating X_0
Current_X = runif(1, min = 0, max = 2 / (norm(A) ^ 2)) * t(A)
k = 0
n = ncol(A)
Update_Matrix = diag(n) - A %*% Current_X
Update_Mat_Norm = norm(Update_Matrix)
while(Update_Mat_Norm > epsilon){
# First, let us update X.
Current_X = Current_X %*% (diag(n) + Update_Matrix)
Update_Matrix = diag(n) - A %*% Current_X
Update_Mat_Norm = norm(Update_Matrix)
k = k + 1
if(k > 2048){
print("Not converging after 2,048 iterations")
print("Use a larger Epsilon or check if A invertible")
}
}
return(Current_X)
}
Inverse_Iter_Finder(A, 10^-3)
solve(A)
A = matrix(c(2,4,5,8), ncol = 2, nrow = 2)
A
inv(A)
library(matlib)
Inverse_Iter_Finder = function(A, epsilon){
# Begin by generating X_0
Current_X = runif(1, min = 0, max = 2 / (norm(A) ^ 2)) * t(A)
k = 0
n = ncol(A)
Update_Matrix = diag(n) - A %*% Current_X
Update_Mat_Norm = norm(Update_Matrix)
while(Update_Mat_Norm > epsilon){
# First, let us update X.
Current_X = Current_X %*% (diag(n) + Update_Matrix)
Update_Matrix = diag(n) - A %*% Current_X
Update_Mat_Norm = norm(Update_Matrix)
k = k + 1
if(k > 2048){
print("Not converging after 2,048 iterations")
print("Use a larger Epsilon or check if A invertible")
}
}
return(Current_X)
}
Comparison_Printer = function(A, epsilon){
X_Star = Inverse_Iter_Finder(A, epsilon)
Inv_A = inv(A)
print(paste("Difference of results:", norm(Inv_A - X_Star)))
}
A = matrix(c(2,4,5,8), ncol = 2, nrow = 2)
inv(A)
epsilon = 10^-4
A = matrix(c(2,4,5,8), ncol = 2, nrow = 2)
# The inverse shall be [-2, 5/4; 1, -1/2]
X_Star = Inverse_Iter_Finder(A, epsilon)
print(paste("Difference of results:", norm(solve(A) - X_Star)))
epsilon = 10^-4
A = matrix(c(2,4,5,8), ncol = 2, nrow = 2)
# The inverse shall be [-2, 5/4; 1, -1/2]
X_Star = Inverse_Iter_Finder(A, epsilon)
print(paste("Difference of results:", norm(solve(A) - X_Star)))
A = matrix(runif(100, min = 1, max = 8), ncol = 10, nrow = 10)
X_Star = Inverse_Iter_Finder(A, epsilon)
print(paste("Difference of results:", norm(solve(A) - X_Star)))
ncol_of_A = 10000
ncol_of_A = 1000
A = matrix(rnorm(ncol_of_A^2, mean = 1, sd = 1), ncol = ncol_of_A, nrow = ncol_of_A )
View(A)
inv(A)
solve(A)
trace(A)
tr(A %*% solve(A))
for(j in 1:3){
Comparison_Printer(10^j, epsilon, 10)
}
library(matlib)
Inverse_Iter_Finder = function(A, epsilon){
# Begin by generating X_0
Current_X = runif(1, min = 0, max = 2 / (norm(A) ^ 2)) * t(A)
k = 0
n = ncol(A)
Update_Matrix = diag(n) - A %*% Current_X
Update_Mat_Norm = norm(Update_Matrix)
while(Update_Mat_Norm > epsilon){
# First, let us update X.
Current_X = Current_X %*% (diag(n) + Update_Matrix)
Update_Matrix = diag(n) - A %*% Current_X
Update_Mat_Norm = norm(Update_Matrix)
k = k + 1
if(k > 2048){
print("Not converging after 2,048 iterations")
print("Use a larger Epsilon or check if A invertible")
}
}
return(Current_X)
}
Comparison_Printer = function(ncol_of_A, epsilon, Num_of_experiment){
Total_Error = 0
for(i in 1:Num_of_experiment){
A = matrix(rnorm(ncol_of_A^2, mean = 1, sd = 1), ncol = ncol_of_A, nrow = ncol_of_A )
X_Star = Inverse_Iter_Finder(A, epsilon)
Inv_A = solve(A)
Total_Error = Average_Error + norm(Inv_A - X_Star)
}
print(paste("Dimension of Matrix:", ncol_of_A, " * ", ncol_of_A))
print(paste("Number of Experiment Done:", Num_of_experiment))
print(paste("Averaged Backward Error", Total_Error / Num_of_experiment))
print("-----------------------")
}
epsilon = 10^-4
A = matrix(c(2,4,5,8), ncol = 2, nrow = 2)
# The inverse shall be [-2, 5/4; 1, -1/2]
X_Star = Inverse_Iter_Finder(A, epsilon)
print(paste("Difference of results:", norm(solve(A) - X_Star)))
A = matrix(runif(100, min = 1, max = 8), ncol = 10, nrow = 10)
X_Star = Inverse_Iter_Finder(A, epsilon)
print(paste("Difference of results:", norm(solve(A) - X_Star)))
for(j in 1:3){
Comparison_Printer(10^j, epsilon, 10)
}
library(matlib)
Inverse_Iter_Finder = function(A, epsilon){
# Begin by generating X_0
Current_X = runif(1, min = 0, max = 2 / (norm(A) ^ 2)) * t(A)
k = 0
n = ncol(A)
Update_Matrix = diag(n) - A %*% Current_X
Update_Mat_Norm = norm(Update_Matrix)
while(Update_Mat_Norm > epsilon){
# First, let us update X.
Current_X = Current_X %*% (diag(n) + Update_Matrix)
Update_Matrix = diag(n) - A %*% Current_X
Update_Mat_Norm = norm(Update_Matrix)
k = k + 1
if(k > 2048){
print("Not converging after 2,048 iterations")
print("Use a larger Epsilon or check if A invertible")
}
}
return(Current_X)
}
Comparison_Printer = function(ncol_of_A, epsilon, Num_of_experiment){
Total_Error = 0
for(i in 1:Num_of_experiment){
A = matrix(rnorm(ncol_of_A^2, mean = 1, sd = 1), ncol = ncol_of_A, nrow = ncol_of_A )
X_Star = Inverse_Iter_Finder(A, epsilon)
Inv_A = solve(A)
Total_Error = Total_Error + norm(Inv_A - X_Star)
}
print(paste("Dimension of Matrix:", ncol_of_A, " * ", ncol_of_A))
print(paste("Number of Experiment Done:", Num_of_experiment))
print(paste("Averaged Backward Error", Total_Error / Num_of_experiment))
print("-----------------------")
}
epsilon = 10^-4
A = matrix(c(2,4,5,8), ncol = 2, nrow = 2)
# The inverse shall be [-2, 5/4; 1, -1/2]
X_Star = Inverse_Iter_Finder(A, epsilon)
print(paste("Difference of results:", norm(solve(A) - X_Star)))
A = matrix(runif(100, min = 1, max = 8), ncol = 10, nrow = 10)
X_Star = Inverse_Iter_Finder(A, epsilon)
print(paste("Difference of results:", norm(solve(A) - X_Star)))
for(j in 1:3){
Comparison_Printer(10^j, epsilon, 10)
}
Comparison_Printer(10, epsilon, 10)
Comparison_Printer(100, epsilon, 10)
Comparison_Printer(1000, epsilon, 1)
setwd("D:\Xianbin Xu\Junior\Summer RA\Data Junkyard\ADEA Data\Compiled Data_Admission")
setwd("D:/Xianbin Xu/Junior/Summer RA/Data Junkyard/ADEA Data/Compiled Data_Admission")
GG = read.csv("Admission_Data_2009_2021.csv")
sum(GG$Total_App_2009)
